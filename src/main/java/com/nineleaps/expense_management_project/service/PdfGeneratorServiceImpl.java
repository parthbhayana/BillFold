package com.nineleaps.expense_management_project.service;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import javax.imageio.ImageIO;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import com.lowagie.text.pdf.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.lowagie.text.Chunk;
import com.lowagie.text.Document;
import com.lowagie.text.Element;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.nineleaps.expense_management_project.entity.Employee;
import com.nineleaps.expense_management_project.entity.Expense;
import com.nineleaps.expense_management_project.entity.Reports;
import com.nineleaps.expense_management_project.repository.EmployeeRepository;
import com.nineleaps.expense_management_project.repository.ReportsRepository;
import static com.lowagie.text.Element.ALIGN_LEFT;
import static com.lowagie.text.Element.ALIGN_RIGHT;
import static com.lowagie.text.Element.ALIGN_CENTER;

@Service
public class PdfGeneratorServiceImpl implements IPdfGeneratorService {

    @Autowired
    ReportsRepository reportsRepository;
    @Autowired
    EmployeeRepository employeeRepository;

    @Autowired
    IExpenseService expenseService;

    public byte[] generatePdf(Long reportId, List<Long> expenseIds, String role) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Document document = new Document(PageSize.A4);
        PdfWriter writer = PdfWriter.getInstance(document, baos);
        class FooterEvent extends PdfPageEventHelper {
            @Override
            public void onEndPage(PdfWriter writer, Document document) {
                PdfContentByte pdfContentByte = writer.getDirectContent();
                float x = PageSize.A4.getWidth() - document.rightMargin();
                float y = document.bottomMargin() - 20;
                Font billFont = FontFactory.getFont(FontFactory.TIMES_BOLD, 25, Font.NORMAL, Color.BLACK);
                Font foldFont = FontFactory.getFont(FontFactory.TIMES_BOLD, 25, Font.NORMAL, new Color(0, 110, 230));
                Font generatedbyFont = FontFactory.getFont(FontFactory.TIMES, 10, Font.NORMAL, Color.BLACK);
                Paragraph footerParagraph = new Paragraph();
                footerParagraph.setAlignment(Element.ALIGN_RIGHT);
                footerParagraph.add(new Chunk("Generated By ", generatedbyFont));
                footerParagraph.add(new Chunk("Bill", billFont));
                footerParagraph.add(new Chunk("Fold.", foldFont));
                ColumnText.showTextAligned(pdfContentByte, Element.ALIGN_RIGHT, footerParagraph, x, y, 0);
            }
        }
        FooterEvent event = new FooterEvent();
        writer.setPageEvent(event);

        document.open();
        Font fontheader01 = FontFactory.getFont(FontFactory.TIMES);
        fontheader01.setSize(10);
        Paragraph headerParagraph01 = new Paragraph("Report Id: " + reportId, fontheader01);
        headerParagraph01.setAlignment(ALIGN_RIGHT);

        Font fontHeader = FontFactory.getFont(FontFactory.TIMES);
        fontHeader.setSize(22);
        Paragraph headerParagraph = new Paragraph("BillFold - Expense Report", fontHeader);
        headerParagraph.setAlignment(ALIGN_CENTER);
        PdfPTable table = new PdfPTable(4);
        table.setWidthPercentage(100);
        Font font = FontFactory.getFont(FontFactory.TIMES, 12);
        table.addCell(getCenterAlignedCell("Date", font));
        table.addCell(getCenterAlignedCell("Merchant", font));
        table.addCell(getCenterAlignedCell("Description", font));
        table.addCell(getCenterAlignedCell("Amount (INR)", font));
        Font fontParagraph = FontFactory.getFont(FontFactory.TIMES);
        fontParagraph.setSize(12);
        Optional<Reports> optionalReport = reportsRepository.findById(reportId);

        if (optionalReport.isPresent()) {
            Reports report = optionalReport.get();

            Employee employee = null;
            if (!expenseIds.isEmpty()) {
                Long firstExpenseId = expenseIds.get(0);
                Expense firstExpense = expenseService.getExpenseById(firstExpenseId);

                if (firstExpense != null && firstExpense.getEmployee() != null) {
                    Long employeeId = firstExpense.getEmployee().getEmployeeId();
                    if (employeeId != null) {
                        Optional<Employee> employeeOptional = employeeRepository.findById(employeeId);
                        if (employeeOptional.isPresent()) {
                            employee = employeeOptional.get();
                        }
                    }
                }
            }
            float total = 0;
            DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("MMM d, yyyy");

            if (role.equals("Manager")) {
                for (Long expenseId : expenseIds) {
                    Expense expenseList = expenseService.getExpenseById(expenseId);
                    LocalDate dateCreated = expenseList.getDate();
                    try {
                        table.addCell(getCenterAlignedCells(dateCreated.format(formatter1), font));
                    } catch (NullPointerException e) {
                        // Handle the null dateCreated gracefully, e.g., log an error or provide a default value.
                        // Here, we're providing a default value of "N/A" as an example.
                        table.addCell(getCenterAlignedCells("N/A", font));
                    }
                    table.addCell(getCenterAlignedCells(expenseList.getMerchantName(), font));
                    table.addCell(getCenterAlignedCells(expenseList.getDescription(), font));
                    try {
                        table.addCell(getCenterAlignedCells(expenseList.getAmount().toString(), font));
                        total += expenseList.getAmount();
                    } catch (NullPointerException e) {
                        // Handle the null expenseList.getAmount() gracefully, e.g., log an error or provide a default value.
                        // Here, we're providing a default value of "0" as an example.
                        table.addCell(getCenterAlignedCells("0", font));
                    }


                }
            }

            Font fontParagraph1 = FontFactory.getFont(FontFactory.TIMES_BOLD);
            fontParagraph1.setSize(14);
            Chunk currencyChunk = new Chunk("INR", fontParagraph1);
            Chunk totalChunk = new Chunk(String.valueOf(total), fontParagraph1);
            Paragraph pdfParagraph01 = new Paragraph();
            pdfParagraph01.setAlignment(ALIGN_RIGHT);
            pdfParagraph01.add("Total Amount: ");
            pdfParagraph01.add(currencyChunk);
            pdfParagraph01.add(" ");
            pdfParagraph01.add(totalChunk);

            Font fontParagraph11 = FontFactory.getFont(FontFactory.TIMES);
            fontParagraph11.setSize(14);
            @SuppressWarnings("null")

            String employeeName = "Employee Name : ";
            if (employee != null && employee.getFirstName() != null && employee.getLastName() != null) {
                employeeName += employee.getFirstName() + " " + employee.getLastName();
            } else {
                employeeName += "Unknown"; // Provide a default value or error message
            }

            Paragraph pdfParagraph = new Paragraph(employeeName, fontParagraph);
            pdfParagraph.setAlignment(ALIGN_LEFT);

            Font fontParagraph12 = FontFactory.getFont(FontFactory.TIMES);
            fontParagraph12.setSize(12);

            String emailText = "Employee Email : ";
            if (employee != null && employee.getEmployeeEmail() != null) {
                emailText += employee.getEmployeeEmail();
            } else {
                emailText += "Email not provided"; // Provide a default value or error message
            }

            Paragraph pdfParagraph02 = new Paragraph(emailText, fontParagraph);
            pdfParagraph02.setAlignment(ALIGN_LEFT);

            Paragraph pdfParagraph002;
            if (employee != null && employee.getOfficialEmployeeId() != null) {
                pdfParagraph002 = new Paragraph("Employee ID : " + employee.getOfficialEmployeeId(), fontParagraph);
            } else {
                pdfParagraph002 = new Paragraph("Employee ID : Not Available", fontParagraph); // Provide a default value or error message
            }
            pdfParagraph002.setAlignment(ALIGN_LEFT);

            Paragraph emptyParagraph = new Paragraph(" ");
            Font fontParagraph13 = FontFactory.getFont(FontFactory.TIMES);
            fontParagraph13.setSize(20);
            Paragraph pdfParagraph03 = new Paragraph("Report Title : " + report.getReportTitle(), fontParagraph13);
            pdfParagraph03.setAlignment(ALIGN_LEFT);
            Paragraph pdfParagraph011 = new Paragraph();
            pdfParagraph011.setAlignment(ALIGN_RIGHT);
            pdfParagraph011.add("Total Amount: ");
            pdfParagraph011.add(currencyChunk);
            pdfParagraph011.add(" ");
            pdfParagraph011.add(totalChunk);
            Font fontNote = FontFactory.getFont(FontFactory.TIMES_ITALIC, 10);
            Paragraph noteParagraph = new Paragraph("Notes:\n", fontNote);
            noteParagraph.setAlignment(ALIGN_LEFT);
            noteParagraph.setIndentationLeft(20);
            noteParagraph.add("The information on this receipt was manually entered. Please verify for authenticity.\n");
            Paragraph lineSeparator = new Paragraph(
                    "----------------------------------------------------------------------------------------------------------------------------------");
            lineSeparator.setAlignment(Element.ALIGN_CENTER);
            lineSeparator.setSpacingAfter(10);

            Paragraph historyTitle = new Paragraph("Report History and comments:",
                    FontFactory.getFont(FontFactory.TIMES_BOLD, 12));
            historyTitle.setAlignment(Element.ALIGN_LEFT);
            historyTitle.setSpacingAfter(10);
            Paragraph historyContent = new Paragraph();
            historyContent.setAlignment(Element.ALIGN_LEFT);
            historyContent.setFont(FontFactory.getFont(FontFactory.TIMES, 10));
            Font fontParagraph14 = FontFactory.getFont(FontFactory.TIMES_ITALIC);
            fontParagraph14.setSize(14);
            document.add(headerParagraph01);
            document.add(headerParagraph);
            document.add(lineSeparator);
            document.add(emptyParagraph);
            document.add(emptyParagraph);
            document.add(pdfParagraph03);
            document.add(emptyParagraph);
            document.add(pdfParagraph002);
            document.add(pdfParagraph);
            document.add(pdfParagraph02);
            document.add(emptyParagraph);
            document.add(emptyParagraph);
            document.add(emptyParagraph);
            document.add(table);
            document.add(pdfParagraph011);
            document.add(emptyParagraph);
            document.add(emptyParagraph);
            document.add(emptyParagraph);
            document.add(emptyParagraph);
            document.add(noteParagraph);
            document.add(lineSeparator);
            document.add(historyTitle);
            document.add(historyContent);

            int supportingPdfStartPage = writer.getPageNumber();

            document.newPage();

            writer.setPageCount(supportingPdfStartPage - 1);
            document.close();
            writer.close();
            return baos.toByteArray();
        }
        return new byte[0];
    }



    @Override
    public PdfPCell getCenterAlignedCell(String content, Font font) {
        PdfPCell cell = new PdfPCell(new Phrase(content, font));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        cell.setPadding(Element.ALIGN_MIDDLE);
        cell.setBackgroundColor(new Color(240, 240, 240));
        cell.setBorderWidth(0.01f);
        cell.setBorderWidthLeft(0);
        cell.setBorderWidthRight(0);
        return cell;
    }

    @Override
    public PdfPCell getCenterAlignedCells(String content, Font font) {
        PdfPCell cell = new PdfPCell(new Phrase(content, font));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        cell.setPadding(Element.ALIGN_MIDDLE);
        cell.setBorderWidth(0.01f);
        cell.setBorderWidthLeft(0);
        cell.setBorderWidthRight(0);
        return cell;
    }

    @Override
    public byte[] export(Long reportId, List<Long> expenseIds, HttpServletResponse response,String role) throws IOException {
        response.setContentType("application/pdf");
        DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd:hh:mm:ss");
        String currentDateTime = dateFormatter.format(new Date());
        String headerKey = "Content-Disposition";
        String headerValue = "attachment; filename=pdf_" + currentDateTime + ".pdf";
        response.setHeader(headerKey, headerValue);
        byte[] pdfBytes = generatePdf(reportId, expenseIds,role);
        response.setContentLength(pdfBytes.length);
        ServletOutputStream outputStream = response.getOutputStream();
        outputStream.write(pdfBytes);
        outputStream.flush();
        outputStream.close();
        return pdfBytes;
    }



    public static String convertToCustomCase(String input) {
        if (input == null || input.isEmpty()) {
            return input;
        }

        StringBuilder result = new StringBuilder();
        boolean capitalizeNext = true;

        for (char c : input.toCharArray()) {
            if (c == '_') {
                result.append(' ');
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    result.append(Character.toUpperCase(c));
                    capitalizeNext = false;
                } else {
                    result.append(Character.toLowerCase(c));
                }
            }
        }
        return result.toString();
    }


}