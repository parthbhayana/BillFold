package com.nineleaps.expense_management_project.service;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import javax.imageio.ImageIO;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;

import com.lowagie.text.*;
import com.lowagie.text.pdf.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.nineleaps.expense_management_project.entity.Employee;
import com.nineleaps.expense_management_project.entity.Expense;
import com.nineleaps.expense_management_project.entity.Reports;
import com.nineleaps.expense_management_project.repository.EmployeeRepository;
import com.nineleaps.expense_management_project.repository.ReportsRepository;
import static com.lowagie.text.Element.ALIGN_LEFT;
import static com.lowagie.text.Element.ALIGN_RIGHT;
import static com.lowagie.text.Element.ALIGN_CENTER;

@Service
public class PdfGeneratorServiceImpl implements IPdfGeneratorService {

    @Autowired
    ReportsRepository reportsRepository;
    @Autowired
    EmployeeRepository employeeRepository;

    @Autowired
    IExpenseService expenseService;
    private static final String CONSTANT1="Finance";

    public class FooterEvent extends PdfPageEventHelper {
        @Override
        public void onEndPage(PdfWriter writer, Document document) {
            PdfContentByte pdfContentByte = writer.getDirectContent();
            float x = PageSize.A4.getWidth() - document.rightMargin();
            float y = document.bottomMargin() - 20;
            Font billFont = FontFactory.getFont(FontFactory.TIMES_BOLD, 25, Font.NORMAL, Color.BLACK);
            Font foldFont = FontFactory.getFont(FontFactory.TIMES_BOLD, 25, Font.NORMAL, new Color(0, 110, 230));
            Font generatedbyFont = FontFactory.getFont(FontFactory.TIMES, 10, Font.NORMAL, Color.BLACK);

            Paragraph footerParagraph = new Paragraph();
            footerParagraph.setAlignment(Element.ALIGN_RIGHT);
            footerParagraph.add(new Chunk("Generated By ", generatedbyFont));
            footerParagraph.add(new Chunk("Bill", billFont));
            footerParagraph.add(new Chunk("Fold.", foldFont));

            ColumnText.showTextAligned(pdfContentByte, Element.ALIGN_RIGHT, footerParagraph, x, y, 0);
        }
    }

    public byte[] generatePdf(Long reportId, List<Long> expenseIds, String role) throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Document document = new Document(PageSize.A4);
        PdfWriter writer = PdfWriter.getInstance(document, baos);

        FooterEvent event = new FooterEvent();
        writer.setPageEvent(event);

        document.open();
        addHeaderSection(document, reportId);
        PdfPTable table = createExpenseTable();
        float total = 0;

        for (Long expenseId : expenseIds) {
            Expense expense = expenseService.getExpenseById(expenseId);
            LocalDate dateCreated = expense.getDate();

            if (role.equals("Manager")) {
                addExpenseRow(table, dateCreated, expense, expense.getAmount(), role);
                total += expense.getAmount();
            } else if (role.equals(CONSTANT1)) {
                addExpenseRow(table, dateCreated, expense, expense.getAmountApproved(), role);
                total += expense.getAmountApproved();
            } else if (role.equals("Employee")) {
                addExpenseRow(table, dateCreated, expense, expense.getAmountApproved(), role);
                total += expense.getAmountApproved();
            }
        }

        addTotalAmount(document, total);
        addEmployeeInformation(document, expenseIds);
        addNotesSection(document);
        addHistorySection(document);
        addSupportingDocuments(document, writer, expenseIds);

        document.close();
        writer.close();
        return baos.toByteArray();
    }

    private void addHeaderSection(Document document, Long reportId) {
        Font headerFont01 = FontFactory.getFont(FontFactory.TIMES);
        headerFont01.setSize(10);

        Paragraph headerParagraph01 = new Paragraph("Report Id: " + reportId, headerFont01);
        headerParagraph01.setAlignment(Element.ALIGN_RIGHT);

        Font headerFont = FontFactory.getFont(FontFactory.TIMES);
        headerFont.setSize(22);

        Paragraph headerParagraph = new Paragraph("BillFold - Expense Report", headerFont);
        headerParagraph.setAlignment(Element.ALIGN_CENTER);

        try {
            document.add(headerParagraph01);
            document.add(headerParagraph);
            document.add(new Paragraph(""));
        } catch (DocumentException e) {

            e.printStackTrace();
        }
    }

    private PdfPTable createExpenseTable() {
        PdfPTable table = new PdfPTable(4);
        table.setWidthPercentage(100);
        Font font = FontFactory.getFont(FontFactory.TIMES, 12);

        table.addCell(getCenterAlignedCell("Date", font));
        table.addCell(getCenterAlignedCell("Merchant", font));
        table.addCell(getCenterAlignedCell("Description", font));
        table.addCell(getCenterAlignedCell("Amount (INR)", font));

        return table;
    }


    private void addExpenseRow(PdfPTable table, LocalDate dateCreated, Expense expense, Double amount, String role) {
        Font font = FontFactory.getFont(FontFactory.TIMES, 12);
        DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("MMM d, yyyy");

        table.addCell(getCenterAlignedCells(dateCreated.format(formatter1), font));
        table.addCell(getCenterAlignedCells(expense.getMerchantName(), font));
        table.addCell(getCenterAlignedCells(expense.getDescription(), font));

        if (role.equals("Manager") || role.equals("Finance") || role.equals("Employee")) {
            table.addCell(getCenterAlignedCells(amount.toString(), font));
        }

        if (role.equals("Finance") || role.equals("Employee")) {
            table.addCell(getCenterAlignedCells(
                    convertToCustomCase(String.valueOf(expense.getManagerApprovalStatusExpense())), font));
        }
    }

    private void addTotalAmount(Document document, float total) {
        Font fontParagraph1 = FontFactory.getFont(FontFactory.TIMES_BOLD);
        fontParagraph1.setSize(14);

        Chunk currencyChunk = new Chunk("INR", fontParagraph1);
        Chunk totalChunk = new Chunk(String.valueOf(total), fontParagraph1);

        Paragraph pdfParagraph01 = new Paragraph();
        pdfParagraph01.setAlignment(Element.ALIGN_RIGHT);
        pdfParagraph01.add("Total Amount: ");
        pdfParagraph01.add(currencyChunk);
        pdfParagraph01.add(" ");
        pdfParagraph01.add(totalChunk);

        try {
            document.add(pdfParagraph01);
            document.add(new Paragraph(""));
        } catch (DocumentException e) {

            e.printStackTrace();
        }
    }


    private void addEmployeeInformation(Document document, List<Long> expenseIds) {
        if (!expenseIds.isEmpty()) {
            Long firstExpenseId = expenseIds.get(0);
            Expense firstExpense = expenseService.getExpenseById(firstExpenseId);
            Employee employee = employeeRepository.findById(firstExpense.getEmployee().getEmployeeId()).orElse(null);

            Font fontParagraph = FontFactory.getFont(FontFactory.TIMES);
            fontParagraph.setSize(14);

            Paragraph pdfParagraph = new Paragraph(
                    "Employee Name: " + employee.getFirstName() + " " + employee.getLastName(), fontParagraph);
            pdfParagraph.setAlignment(Element.ALIGN_LEFT);

            Font fontParagraph12 = FontFactory.getFont(FontFactory.TIMES);
            fontParagraph12.setSize(12);

            Paragraph pdfParagraph02 = new Paragraph("Employee Email: " + employee.getEmployeeEmail(), fontParagraph12);
            pdfParagraph02.setAlignment(Element.ALIGN_LEFT);

            Paragraph pdfParagraph002 = new Paragraph("Employee ID: " + employee.getOfficialEmployeeId(), fontParagraph12);
            pdfParagraph002.setAlignment(Element.ALIGN_LEFT);

            try {
                document.add(pdfParagraph);
                document.add(pdfParagraph02);
                document.add(pdfParagraph002);
                document.add(new Paragraph(""));
            } catch (DocumentException e) {

                e.printStackTrace();
            }
        }
    }


    private void addNotesSection(Document document) {
        Font fontNote = FontFactory.getFont(FontFactory.TIMES_ITALIC, 10);
        Paragraph noteParagraph = new Paragraph("Notes:", fontNote);
        noteParagraph.setAlignment(Element.ALIGN_LEFT);
        noteParagraph.setIndentationLeft(20);
        noteParagraph.add("The information on this receipt was manually entered. Please verify for authenticity.");

        try {
            document.add(noteParagraph);
            document.add(new Paragraph(""));
        } catch (DocumentException e) {

            e.printStackTrace();
        }
    }

    private void addHistorySection(Document document) {
        Font fontTitle = FontFactory.getFont(FontFactory.TIMES_BOLD, 12);
        Paragraph historyTitle = new Paragraph("Report History and Comments:", fontTitle);
        historyTitle.setAlignment(Element.ALIGN_LEFT);
        historyTitle.setSpacingAfter(10);

        Paragraph historyContent = new Paragraph();
        historyContent.setAlignment(Element.ALIGN_LEFT);
        historyContent.setFont(FontFactory.getFont(FontFactory.TIMES, 10));

        // You can add historical information and comments here
        // Example:
        // historyContent.add("Report Created on: [Date]\n");
        // historyContent.add("Report submitted to you (cc: you) on: [Date]\n");

        try {
            document.add(historyTitle);
            document.add(historyContent);
            document.add(new Paragraph(""));
        } catch (DocumentException e) {

            e.printStackTrace();
        }
    }


    private void addSupportingDocuments(Document document, PdfWriter writer, List<Long> expenseIds) throws IOException {
        int supportingPdfStartPage = writer.getPageNumber();

        for (Long expenseId : expenseIds) {
            Expense expense = expenseService.getExpenseById(expenseId);
            byte[] supportingDocument = expense.getFile();

            if (supportingDocument != null) {
                if (isPdfFormat(supportingDocument)) {
                    PdfReader pdfReader = new PdfReader(supportingDocument);
                    int numPages = pdfReader.getNumberOfPages();

                    for (int pageNum = 1; pageNum <= numPages; pageNum++) {
                        PdfImportedPage page = writer.getImportedPage(pdfReader, pageNum);
                        document.newPage();
                        PdfContentByte contentByte = writer.getDirectContent();
                        contentByte.addTemplate(page, 0, 0);
                    }

                    pdfReader.close();
                } else if (isImageFormat(supportingDocument)) {
                    document.newPage();
                    InputStream imageInputStream = new ByteArrayInputStream(supportingDocument);
                    BufferedImage bufferedImage = ImageIO.read(imageInputStream);
                    Image image = Image.getInstance(bufferedImage, null);
                    image.scaleAbsolute(600f, 600f);
                    image.setAlignment(Image.MIDDLE);
                    document.add(image);
                    document.newPage();
                }
            }
        }

        writer.setPageCount(supportingPdfStartPage - 1);
    }


    private boolean isImageFormat(byte[] data) {
        try {
            BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(data));
            return bufferedImage != null;
        } catch (IOException e) {
            return false;
        }
    }

    private boolean isPdfFormat(byte[] data) {
        try {
            PdfReader pdfReader = new PdfReader(data);
            pdfReader.close();
            return true;
        } catch (IOException e) {
            return false;
        }
    }

    @Override
    public PdfPCell getCenterAlignedCell(String content, Font font) {
        PdfPCell cell = new PdfPCell(new Phrase(content, font));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        cell.setPadding(Element.ALIGN_MIDDLE);
        cell.setBackgroundColor(new Color(240, 240, 240));
        cell.setBorderWidth(0.01f);
        cell.setBorderWidthLeft(0);
        cell.setBorderWidthRight(0);
        return cell;
    }

    @Override
    public PdfPCell getCenterAlignedCells(String content, Font font) {
        PdfPCell cell = new PdfPCell(new Phrase(content, font));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
        cell.setPadding(Element.ALIGN_MIDDLE);
        cell.setBorderWidth(0.01f);
        cell.setBorderWidthLeft(0);
        cell.setBorderWidthRight(0);
        return cell;
    }

    @Override
    public byte[] export(Long reportId, List<Long> expenseIds, HttpServletResponse response,String role) throws IOException {
        response.setContentType("application/pdf");
        DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd:hh:mm:ss");
        String currentDateTime = dateFormatter.format(new Date());
        String headerKey = "Content-Disposition";
        String headerValue = "attachment; filename=pdf_" + currentDateTime + ".pdf";
        response.setHeader(headerKey, headerValue);
        byte[] pdfBytes = generatePdf(reportId, expenseIds,role);
        response.setContentLength(pdfBytes.length);
        ServletOutputStream outputStream = response.getOutputStream();
        outputStream.write(pdfBytes);
        outputStream.flush();
        outputStream.close();
        return pdfBytes;
    }

    public static String convertToCustomCase(String input) {
        if (input == null || input.isEmpty()) {
            return input;
        }

        StringBuilder result = new StringBuilder();
        boolean capitalizeNext = true;

        for (char c : input.toCharArray()) {
            if (c == '_') {
                result.append(' ');
                capitalizeNext = true;
            } else {
                if (capitalizeNext) {
                    result.append(Character.toUpperCase(c));
                    capitalizeNext = false;
                } else {
                    result.append(Character.toLowerCase(c));
                }
            }
        }
        return result.toString();
    }
}